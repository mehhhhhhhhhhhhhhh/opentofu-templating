#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'erb'
require 'set'
require 'ostruct'
require 'fileutils'

##############################
# environment checks

LibDir = File.realpath(__dir__)

TofuVersion = YAML.load(File.read(File.join(__dir__, '..', '..', 'opentofu-version.tf.json')))['terraform']['required_version']
TofuBinary = `which tofu`.strip
if TofuBinary.empty? or not $?.success?
	$stderr.puts "Couldn't find tofu binary -- is it installed?"
	$stderr.puts "  -> https://github.com/opentofu/opentofu/releases/tag/#{TofuVersion}"
	$stderr.puts "(You have ~ in your $PATH which sadly works in bash but not much else. Use $HOME instead?)" if ENV['PATH'].include?('~')
	exit 4
else
#	unless `"#{TofuBinary}" -v`.include?(TofuVersion)
#		$stderr.puts "You have the wrong OpenTofu version; you should have #{TofuVersion}"
#		$stderr.puts "  -> https://github.com/opentofu/opentofu/releases/tag/#{TofuVersion}"
#		exit 4
#	end
end

TeeBinary = `which tee`.strip
raise "Couldn't find tee binary -- is everything ok?" if TeeBinary.nil? or TeeBinary.empty? or not $?.success?

opts_parser = OptionParser.new do |opts|
	opts.on('-eENV', '--environment=ENV') {|env| EnvironmentName=env }
	opts.on('-oOUTNAME', '--output=OUTNAME') {|out_name| OutputFilePrefix=File::realdirpath(out_name) }
	opts.on('-i', '--force-init') { ShouldInit = true }
	opts.on('-t', '--test') { TestTemplating = true }
end
opts_parser.parse!

# Can pass e.g. `./plan ... -- workspace show` or `./plan ... -- import thing thing`
# Or... `./plan -- apply result.plan`
# Then that command will be run instead of the default plan command (but in the same working directory)
AlternateTofuCommand = ARGV.empty? ? nil : ARGV

TestTemplating ||= false
EnvironmentName ||= ENV['AWS_ENV'] or raise "Environment not specified (-e, --environment, $AWS_ENV)"

SourceDir = File.realdirpath(File.dirname($0))
TofuPluginDir = ENV['TERRAFORM_PLUGIN_DIR'] || File.join(__dir__, '.terraform-plugins')
WorkDir = case
	when ENV['WORK_DIR']
		ENV['WORK_DIR']
	when ENV['ENVIRONMENTS_DIR']
		File.join(ENV['ENVIRONMENTS_DIR'], EnvironmentName)
	else
		File.join(SourceDir, 'environments', EnvironmentName)
	end
OutputFilePrefix ||= ENV['OUTPUT_FILE_PREFIX'] ? File::realdirpath(ENV['OUTPUT_FILE_PREFIX']) : File.join(WorkDir, 'result')

ShouldInit ||= (not File.exist?(File.join(WorkDir, '.terraform')))
IsWorkspaceCommand = (AlternateTofuCommand.first rescue '') == 'workspace'


##############################
# data and templating

Environments = YAML::load_file(File::realpath(__dir__ + '/../../example-data/environments.yml'))['environments']
EnvironmentVars = Environments[EnvironmentName]
raise "#{EnvironmentName} environment is missing from environments.yml" unless EnvironmentVars
EnvironmentVars['name'] ||= EnvironmentName

# Environment could just be the EnvironmentVars hash straight from the YAML, but this way it can also have methods
class Environment
	def self.[](val)
		EnvironmentVars[val]
	end
	def self.include?(v)
		EnvironmentVars.include?(v)
	end
	def self.tag_name
		self['tag_name'] || self['name']
	end
	def self.external_domain
		self['external_domain'] || self['domain']
	end
	def self.method_missing(name, *args)
		name = name.to_s
		raise "Trying to call method with arguments on Environment, which isn't defined properly" unless args.empty?
		raise "Undefined Environment value #{}" unless self.include?(name)
		self[name]
	end
	# If we don't define a method for a name, it will instead look for a field in the hash with that name
end

Accounts = YAML::load_file(File::realpath(__dir__ + '/../../example-data/accounts.yml'))['accounts']['aws']
Account = Accounts[Environment['production_account'] || 'dev']

RegionName = Environment['region']
Regions = YAML::load_file(File::realpath(__dir__ + '/../../example-data/regions.yml'))['regions']
Regions.each do |region_name, region_vars|
	region_vars.merge! (region_vars[Environment['production_account'] || 'dev'] || {})
	region_vars.delete 'dev'
	region_vars.delete 'production'
	region_vars.delete 'eu-production'
end
Region = Regions[RegionName]

BackendStack = []
raise "#{EnvironmentName} doesn't have a backend_stack version specified" unless Environment['backend_stack']
stack_file = YAML::load_file(File::realpath(__dir__ + "/../../example-data/stacks/#{Environment['backend_stack']}.stack.yml"))
(stack_file['services'].to_a + stack_file['mocks'].to_a).each do |port, serv|
	next if serv['only_environments'] and not serv['only_environments'].any? {|env_pattern|
		EnvironmentName == env_pattern || env_pattern =~ /(.*)\*/ && EnvironmentName.start_with?($1)
	}
	serv['port'] = port
	BackendStack << serv
end

Dir::chdir SourceDir

FileUtils.mkdir_p WorkDir

scope_vars = OpenStruct.new({
	# you can put things in here, to make them available to your .tf.rb or .tf.erb files
	TofuVersion: TofuVersion,
	Environments: Environments,
	Environment: Environment,
	Regions: Regions,
	Region: Region,
	Account: Account,
	BackendStack: BackendStack
})
binding = scope_vars.instance_eval { binding }
expected_files = Set.new(['result.planning'])
Dir["**/*"].each do |path|
	next if File.directory?(path)
	next if path.start_with?('environments')
	next if path.end_with?('result.planning')
	next if path == 'plan' or path == 'summarize'
	if match = /((?<subdir>.*)\/)?(?<filename>[^\/]*)\.(?<extension>[^.]+)\.erb$/ =~ path
		FileUtils.mkdir_p(File.join(WorkDir, subdir)) if subdir
		destination_path = "#{WorkDir}/#{subdir ? "#{subdir}/" : ''}#{filename}.gen.#{extension}"
		expected_files << "#{subdir ? "#{subdir}/" : ''}#{filename}.gen.#{extension}"
		File.open(destination_path, 'w') do |destination|
			erb = ERB.new(File.read(path))
			erb.filename = path
			destination.write(erb.result(binding))
		end
	elsif match = /((?<subdir>.*)\/)?(?<filename>[^\/]*)\.tf.rb$/ =~ path
		FileUtils.mkdir_p(File.join(WorkDir, subdir)) if subdir
		destination_path = "#{WorkDir}/#{subdir ? "#{subdir}/" : ''}#{filename}.gen.tf.json"
		expected_files << "#{subdir ? "#{subdir}/" : ''}#{filename}.gen.tf.json"
		File.open(destination_path, 'w') do |destination|
			scope_vars.instance_eval do
				load(File.join(LibDir, 'tf-ruby-template-wrapper.rb'))
				tf_template(File.realpath(path), destination)
			end
		end
	elsif match = /((?<subdir>.*)\/)?(?<filename>[^\/]*)$/ =~ path
		FileUtils.mkdir_p(File.join(WorkDir, subdir)) if subdir
		FileUtils.ln(path, "#{WorkDir}/#{subdir ? "#{subdir}/" : ''}#{filename}", force: true)
		expected_files << "#{subdir ? "#{subdir}/" : ''}#{filename}"
	end
end

Dir::chdir WorkDir

(Set.new(Dir["**/*"]) - expected_files).reject{|d| File.directory?(d) }.each do |unexpected_file|
	if unexpected_file.end_with?('.tf') or unexpected_file.end_with?('.tf.json')
		$stderr.puts "Warning: deleting unexpected file #{unexpected_file} in working directory."
		File.unlink(unexpected_file)
	else
		$stderr.puts "Warning: unexpected file #{unexpected_file} is in working directory."
	end
end

exit if TestTemplating


##############################
# "patch branch" check

intended_branch = Environment['infra_branch'] || 'master'
current_branch = `git status -b` rescue nil
if $?.success? and current_branch and not current_branch.each_line.first.strip.end_with? intended_branch
	puts "Warning! You might not be on the right branch (expecting #{intended_branch})\n"
end

begin
	intended_base_branch, = intended_branch.rpartition('+')
	unless intended_base_branch.empty?
		expected_revision = [intended_base_branch, "origin/#{intended_base_branch}"].map {|try_branch|
			`git rev-parse --verify -q #{try_branch}`.strip
		}.find {|revision| not revision.empty? }

		if expected_revision.nil?
			puts "Warning! Base branch for patch branch seems to be missing."
		elsif `git merge-base #{expected_revision} HEAD`.strip != expected_revision
			puts "Warning! The patch branch you're on isn't on top of #{intended_base_branch}. Rebase first?"
		end
	end
rescue
	$stderr.puts "Branch checker failed to decide whether rebase needs to happen."
	$stderr.puts $!
end


##############################
# tofu invocation

unless ENV['AWS_SECRET_ACCESS_KEY'] or ENV['AWS_SECRET_KEY']
	$stderr.puts "No AWS credentials found. Use the wrapper?"
	$stderr.puts "   e.g.:  $ aws-env qa-222 -- ./plan"
	exit 4
end

current_workspace = `'#{TofuBinary}' workspace show`.strip
if ShouldInit or (current_workspace != Environment['name'] and not IsWorkspaceCommand)
	FileUtils.mkdir_p(TofuPluginDir)
	FileUtils.mkdir_p(File.join(WorkDir, '.terraform'))
	FileUtils.ln_s(TofuPluginDir, File.join(WorkDir, '.terraform', 'plugins'), force: true)
	system("'#{TofuBinary}' init -reconfigure")
	system("'#{TofuBinary}' workspace select #{Environment['name']}") or exit 4 unless IsWorkspaceCommand

	system("'#{TofuBinary}' init -reconfigure") or exit 4 unless IsWorkspaceCommand
end

current_workspace = `'#{TofuBinary}' workspace show`.strip
unless IsWorkspaceCommand or current_workspace == Environment['name']
	puts "You've got the #{current_workspace} workspace selected, not the #{Environment['name']} one!"
	puts "  (./plan -i is for --force-init)"
	exit 4
end

# Build the options that both import and plan can use
general_options = ['--input=false']
general_options += ['--var', "domain=#{Environment['domain']}"]
general_options += ['--var', "env_tag_name=#{Environment['tag_name'] || Environment['name']}"]

plan_command = [TofuBinary]
if AlternateTofuCommand
	plan_command += case
		when %w[apply graph state show workspace taint untaint].any?{|cmd| AlternateTofuCommand[0] == cmd }
			AlternateTofuCommand
		else
			[AlternateTofuCommand[0], *general_options, *(AlternateTofuCommand[1..-1] || [])]
		end
else
	plan_command += ["plan", *general_options]
	plan_command += ["--out", "#{OutputFilePrefix}.plan"]
end

if plan_command[1] == 'plan'
	tee_out, tee_in = IO.pipe
	tee_pid = spawn(TeeBinary, "#{OutputFilePrefix}.planning", :in=>tee_out)
	Process.detach tee_pid
	exec(*plan_command, [:out, :err]=>tee_in)
else
	exec(*plan_command)
end
